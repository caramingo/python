
# –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
from fastapi import FastAPI, Request
from fastapi.responses import HTMLResponse
from fastapi.templating import Jinja2Templates
from apscheduler.schedulers.background import BackgroundScheduler
from datetime import datetime
import threading

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI()

# –£–∫–∞–∑–∞–Ω–∏–µ –ø–∞–ø–∫–∏ —Å —à–∞–±–ª–æ–Ω–∞–º–∏ HTML (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
templates = Jinja2Templates(directory="templates")

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –∫–∞–∂–¥–æ–º—É job_id
request_counts = {}

# –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ request_counts
request_lock = threading.Lock()

# üîß –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ job_id
THRESHOLDS = {
    "job-id1": 2,
    "job-id2": 4,
    "job-id3": 1,
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–∏–¥–∞ /job-idX
@app.get("/{job_id}")
def count_job_id(job_id: str):
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ favicon.ico, –∫–æ—Ç–æ—Ä—ã–π –±—Ä–∞—É–∑–µ—Ä –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    if job_id == "favicon.ico":
        return {"message": "Ignored"}

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –¥–∞–Ω–Ω–æ–º—É job_id (–≤ –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ–º —Ä–µ–∂–∏–º–µ)
    with request_lock:
        request_counts[job_id] = request_counts.get(job_id, 0) + 1

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞
    return {"message": f"Counted job ID: {job_id}", "total": request_counts[job_id]}

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –æ—Ç–æ–±—Ä–∞–∂–∞—é—â–∞—è HTML-—Ç–∞–±–ª–∏—Ü—É —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
@app.get("/", response_class=HTMLResponse)
def stats_page(request: Request):
    with request_lock:
        data = {}
        for job_id, count in request_counts.items():
            threshold = THRESHOLDS.get(job_id)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å:
            # "OK" ‚Äî –µ—Å–ª–∏ count == threshold
            # "WARN" ‚Äî –µ—Å–ª–∏ count < threshold –∏–ª–∏ count > threshold
            # "UNKNOWN" ‚Äî –µ—Å–ª–∏ threshold –Ω–µ –∑–∞–¥–∞–Ω
            if threshold is None:
                status = "UNKNOWN"
            elif count == threshold:
                status = "OK"
            else:
                status = "WARN"

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ
            data[job_id] = {
                "count": count,
                "threshold": threshold,
                "status": status
            }

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º HTML-—à–∞–±–ª–æ–Ω —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    return templates.TemplateResponse("stats.html", {
        "request": request,
        "stats": data,
        "last_updated": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    })

# –§—É–Ω–∫—Ü–∏—è —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–æ–±–Ω—É–ª—è–µ—Ç –≤—Å–µ —Å—á—ë—Ç—á–∏–∫–∏)
def reset_counts():
    with request_lock:
        request_counts.clear()
    print(f"[{datetime.now()}] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞.")

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ –≤ 23:59
scheduler = BackgroundScheduler()
scheduler.add_job(reset_counts, trigger='cron', hour=23, minute=59)
scheduler.start()

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
import atexit
atexit.register(lambda: scheduler.shutdown())
